"0","# Detectar Ã³rdenes fraccionadas (mismo proveedor, fechas cercanas, montos similares)"
"0","fraccionamiento <- datos %>%"
"0","  arrange(RUC, Fecha_Emision) %>%"
"0","  group_by(RUC) %>%"
"0","  mutate("
"0","    Dias_Entre_Ordenes = as.numeric(Fecha_Emision - lag(Fecha_Emision)),"
"0","    Monto_Anterior = lag(Monto_limpio),"
"0","    Diferencia_Monto = abs(Monto_limpio - lag(Monto_limpio)),"
"0","    "
"0","    # Detectar si es posible fraccionamiento"
"0","    Posible_Fraccionamiento = Dias_Entre_Ordenes <= 7 & "
"0","                              Diferencia_Monto < (Monto_limpio * 0.2) &"
"0","                              !is.na(Dias_Entre_Ordenes)"
"0","  ) %>%"
"0","  filter(Posible_Fraccionamiento == TRUE)"
"0",""
"0","casos_fraccionamiento <- fraccionamiento %>%"
"0","  group_by(RUC, Razon_Social) %>%"
"0","  summarise("
"0","    Casos_Detectados = n(),"
"0","    Monto_Total_Fraccionado = sum(Monto_limpio),"
"0","    .groups = 'drop'"
"0","  ) %>%"
"0","  arrange(desc(Casos_Detectados))"
"0",""
"0","print(""POSIBLES CASOS DE FRACCIONAMIENTO:"")"
"1","[1]"
"1"," ""POSIBLES CASOS DE FRACCIONAMIENTO:"""
"1","
"
"0","print(head(casos_fraccionamiento, 10))"
