# Test de Benford para detectar manipulaci√≥n de cifras
library(benford.analysis)
datos %>%
group_by(Periodo = ifelse(A√±o < 2023, "Antes 2023", "Desde 2023")) %>%
summarise(
Mediana = median(Monto_limpio, na.rm = TRUE),
Promedio = mean(Monto_limpio, na.rm = TRUE)
)
# AGREGAR AL FINAL:
# ========================================
# INFORME EJECUTIVO FINAL
# ========================================
cat("\n")
cat("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n")
cat("‚ïë   INFORME EJECUTIVO - AN√ÅLISIS DE CORRUPCI√ìN    ‚ïë\n")
cat("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n")
cat("1. HALLAZGOS PRINCIPALES:\n")
cat("   ‚îú‚îÄ Concentraci√≥n de mercado (IHH):", round(IHH, 0), "\n")
cat("   ‚îú‚îÄ Proveedores que controlan 80% del gasto:", proveedores_80, "\n")
cat("   ‚îú‚îÄ Casos de fraccionamiento detectados:", nrow(casos_fraccionamiento), "\n")
cat("   ‚îî‚îÄ √ìrdenes con sobreprecios:", nrow(ordenes_precio_anomalo), "\n\n")
cat("2. RECOMENDACIONES:\n")
cat("   ‚ñ° Auditor√≠a inmediata a los", nrow(score_integral), "proveedores de alto riesgo\n")
cat("   ‚ñ° Investigar", nrow(proveedores_nuevos), "proveedores nuevos con contratos grandes\n")
cat("   ‚ñ° Revisar concentraci√≥n fin de a√±o (",
round(mean(concentracion_fin_a√±o$Porcentaje_Fin_A√±o), 1), "% promedio)\n")
cat("   ‚ñ° Fortalecer controles en tipos de contrataci√≥n con mayor incidencia\n\n")
cat("3. PROVEEDORES CR√çTICOS (Top 5 por riesgo):\n")
print(score_integral %>%
head(5) %>%
select(RUC, Razon_Social, SCORE_RIESGO_TOTAL, Monto_Total))
cat("\n4. MONTO ESTIMADO EN RIESGO:\n")
monto_riesgo <- sum(score_integral$Monto_Total)
cat("   S/", format(monto_riesgo, big.mark = ","), "\n")
cat("   (", round(monto_riesgo/sum(datos$Monto_limpio)*100, 2), "% del gasto total)\n\n")
# ========================================
# AN√ÅLISIS DE INTERVALOS DE CONFIANZA
# ========================================
# IC para monto promedio por tipo de proveedor
ic_montos <- datos %>%
group_by(Tipo_Proveedor) %>%
summarise(
n = n(),
media = mean(Monto_limpio),
sd = sd(Monto_limpio),
error_std = sd / sqrt(n),
ic_inferior = media - 1.96 * error_std,
ic_superior = media + 1.96 * error_std
)
# ========================================
# AN√ÅLISIS DE INTERVALOS DE CONFIANZA
# ========================================
ic_montos <- datos %>%
group_by(tipo_proveedor) %>%
summarise(
n = n(),
media = mean(Monto_limpio, na.rm = TRUE),
sd = sd(Monto_limpio, na.rm = TRUE),
error_std = sd / sqrt(n),
ic_inferior = media - 1.96 * error_std,
ic_superior = media + 1.96 * error_std
)
names(datos)
# ========================================
# AN√ÅLISIS DE INTERVALOS DE CONFIANZA
# ========================================
ic_montos <- datos %>%
group_by(tipo_proveedor) %>%
summarise(
n = n(),
media = mean(Monto_limpio, na.rm = TRUE),
sd = sd(Monto_limpio, na.rm = TRUE),
error_std = sd / sqrt(n),
ic_inferior = media - 1.96 * error_std,
ic_superior = media + 1.96 * error_std
)
# ========================================
# AN√ÅLISIS DE INTERVALOS DE CONFIANZA
# ========================================
ic_montos <- datos %>%
group_by(Tipo_Contratacion) %>%
summarise(
n = n(),
media = mean(Monto_limpio, na.rm = TRUE),
sd = sd(Monto_limpio, na.rm = TRUE),
error_std = sd / sqrt(n),
ic_inferior = media - 1.96 * error_std,
ic_superior = media + 1.96 * error_std
)
print("INTERVALOS DE CONFIANZA (95%) PARA MONTOS PROMEDIO:")
print(ic_montos)
# Visualizar
ggplot(ic_montos, aes(x = Tipo_Contratacion, y = media)) +
geom_point(size = 4) +
geom_errorbar(aes(ymin = ic_inferior, ymax = ic_superior), width = 0.2) +
labs(title = "Intervalos de Confianza para Monto Promedio por Tipo de Contrataci√≥n",
y = "Monto Promedio (S/)", x = "Tipo de Contrataci√≥n") +
theme_minimal()
library(igraph)
library(ggraph)
library(dplyr)
library(lubridate)
library(tidyr)
# Tu c√≥digo hasta crear 'red_sospechosa'...
# Calcular el grado (n√∫mero de conexiones) de cada nodo
grados <- degree(red_sospechosa)
# Obtener los top 20 proveedores m√°s conectados
top_20_nodos <- names(sort(grados, decreasing = TRUE))[1:20]
# Crear subgrafo con solo esos 20
sub_red <- induced_subgraph(red_sospechosa, vids = top_20_nodos)
# Graficar
ggraph(sub_red, layout = "fr") +
geom_edge_link(aes(width = weight), alpha = 0.5) +
geom_node_point(size = 5, color = "red") +
geom_node_text(aes(label = name), repel = TRUE, size = 3) +
theme_void() +
labs(title = "Top 20 Proveedores m√°s Conectados (Patrones Similares)")
# Calcular el promedio de correlaci√≥n por nodo
peso_promedio <- strength(red_sospechosa) / degree(red_sospechosa)
# Seleccionar los 20 con mayor promedio de correlaci√≥n
top_20_peso <- names(sort(peso_promedio, decreasing = TRUE))[1:20]
# Crear subgrafo
sub_red_peso <- induced_subgraph(red_sospechosa, vids = top_20_peso)
# Graficar
ggraph(sub_red_peso, layout = "fr") +
geom_edge_link(aes(width = weight), alpha = 0.6) +
geom_node_point(size = 5, color = "orange") +
geom_node_text(aes(label = name), repel = TRUE, size = 3) +
theme_void() +
labs(title = "Top 20 Proveedores con Correlaci√≥n Promedio M√°s Alta")
# Extraer el data frame de aristas con sus pesos
edges_df <- as_data_frame(red_sospechosa, what = "edges")
# Filtrar las 20 correlaciones m√°s altas
top_20_edges <- edges_df %>%
arrange(desc(weight)) %>%
slice_head(n = 20)
# Crear red solo con esos pares
sub_red_edges <- graph_from_data_frame(top_20_edges, directed = FALSE)
# Graficar
ggraph(sub_red_edges, layout = "fr") +
geom_edge_link(aes(width = weight), alpha = 0.7) +
geom_node_point(size = 5, color = "steelblue") +
geom_node_text(aes(label = name), repel = TRUE, size = 3) +
theme_void() +
labs(title = "Top 20 Relaciones M√°s Fuertes entre Proveedores")
library(igraph)
library(ggraph)
library(dplyr)
library(lubridate)
library(tidyr)
library(ggplot2)
library(scales)
# ================================================
# 1Ô∏è‚É£ Crear la red de proveedores con patrones similares
# ================================================
red_temporal <- datos %>%
select(RUC, Fecha_Emision, Monto_limpio) %>%
mutate(Semana = floor_date(Fecha_Emision, "week")) %>%
group_by(RUC, Semana) %>%
summarise(Monto = sum(Monto_limpio), .groups = "drop") %>%
pivot_wider(names_from = Semana, values_from = Monto, values_fill = 0)
matriz_proveedores <- as.matrix(red_temporal[,-1])
rownames(matriz_proveedores) <- red_temporal$RUC
# Correlaci√≥n entre patrones de gasto
correlacion_proveedores <- cor(t(matriz_proveedores))
# Crear red con correlaciones > 0.7
red_sospechosa <- graph_from_adjacency_matrix(
(correlacion_proveedores > 0.7) * correlacion_proveedores,
mode = "undirected",
weighted = TRUE,
diag = FALSE
)
# ================================================
# 2Ô∏è‚É£ Calcular m√©tricas y seleccionar el top 20
# ================================================
# Grado (n√∫mero de conexiones)
grados <- degree(red_sospechosa)
# Fuerza total (suma de correlaciones)
fuerza_total <- strength(red_sospechosa)
# Crear data frame con m√©tricas
metricas <- data.frame(
Proveedor = names(grados),
Grado = grados,
Fuerza = fuerza_total
) %>%
arrange(desc(Fuerza)) %>%
slice_head(n = 20)
# Subgrafo con los top 20 proveedores
sub_red <- induced_subgraph(red_sospechosa, vids = metricas$Proveedor)
# ================================================
# 3Ô∏è‚É£ Visualizaci√≥n elegante con ggraph
# ================================================
set.seed(123) # Para mantener el layout fijo
ggraph(sub_red, layout = "fr") +
geom_edge_link(aes(width = weight, alpha = weight), color = "#5DADE2") +
geom_node_point(aes(size = fuerza_total[name]), color = "#E74C3C") +
geom_node_text(aes(label = name), repel = TRUE, size = 3, color = "black", fontface = "bold") +
scale_edge_width_continuous(range = c(0.2, 2), guide = "none") +
scale_size_continuous(range = c(4, 10)) +
theme_void() +
labs(
title = "üî• Top 20 Proveedores con Patrones de Gasto Similares",
subtitle = "Tama√±o del nodo = Fuerza total de correlaci√≥n | Color de l√≠neas = nivel de similitud",
caption = "Fuente: An√°lisis de correlaci√≥n temporal entre proveedores"
) +
theme(
plot.title = element_text(face = "bold", size = 16, color = "#1A5276"),
plot.subtitle = element_text(size = 11, color = "#2E4053"),
plot.caption = element_text(size = 8, color = "#7F8C8D")
)
# ================================================
# 4Ô∏è‚É£ (Opcional) Mostrar tabla ordenada con los puntajes
# ================================================
metricas %>%
arrange(desc(Fuerza)) %>%
mutate(Rank = row_number()) %>%
select(Rank, Proveedor, Grado, Fuerza)
library(igraph)
library(ggraph)
library(dplyr)
library(lubridate)
library(tidyr)
library(ggplot2)
library(scales)
# ================================================
# 1Ô∏è‚É£ Crear la red de proveedores con patrones similares
# ================================================
red_temporal <- datos %>%
select(RUC, Fecha_Emision, Monto_limpio) %>%
mutate(Semana = floor_date(Fecha_Emision, "week")) %>%
group_by(RUC, Semana) %>%
summarise(Monto = sum(Monto_limpio), .groups = "drop") %>%
pivot_wider(names_from = Semana, values_from = Monto, values_fill = 0)
matriz_proveedores <- as.matrix(red_temporal[,-1])
rownames(matriz_proveedores) <- red_temporal$RUC
# Correlaci√≥n entre patrones de gasto
correlacion_proveedores <- cor(t(matriz_proveedores))
# Crear red con correlaciones > 0.7
red_sospechosa <- graph_from_adjacency_matrix(
(correlacion_proveedores > 0.7) * correlacion_proveedores,
mode = "undirected",
weighted = TRUE,
diag = FALSE
)
# ================================================
# 2Ô∏è‚É£ Calcular m√©tricas y seleccionar el top 20
# ================================================
# Grado (n√∫mero de conexiones)
grados <- degree(red_sospechosa)
# Fuerza total (suma de correlaciones)
fuerza_total <- strength(red_sospechosa)
# Crear data frame con m√©tricas
metricas <- data.frame(
Proveedor = names(grados),
Grado = grados,
Fuerza = fuerza_total
) %>%
arrange(desc(Fuerza)) %>%
slice_head(n = 20)
# ================================================
# 3Ô∏è‚É£ Vincular nombres de proveedores (si existen)
# ================================================
# Verifica si existe una columna con nombre del proveedor
col_nombres <- intersect(names(datos), c("Nombre_Proveedor", "Razon_Social", "Proveedor_Nombre"))
if (length(col_nombres) > 0) {
nombres_unicos <- datos %>%
select(RUC, all_of(col_nombres[1])) %>%
distinct()
metricas <- metricas %>%
left_join(nombres_unicos, by = c("Proveedor" = "RUC")) %>%
mutate(
Etiqueta = paste0(!!sym(col_nombres[1]), "\n(", Proveedor, ")")
)
} else {
metricas <- metricas %>%
mutate(Etiqueta = paste0("Proveedor ", row_number(), "\n(", Proveedor, ")"))
}
library(igraph)
library(ggraph)
library(dplyr)
library(lubridate)
library(tidyr)
library(ggplot2)
library(scales)
# ================================================
# 1Ô∏è‚É£ Crear la red de proveedores con patrones similares
# ================================================
red_temporal <- datos %>%
select(RUC, Fecha_Emision, Monto_limpio) %>%
mutate(Semana = floor_date(Fecha_Emision, "week")) %>%
group_by(RUC, Semana) %>%
summarise(Monto = sum(Monto_limpio), .groups = "drop") %>%
pivot_wider(names_from = Semana, values_from = Monto, values_fill = 0)
matriz_proveedores <- as.matrix(red_temporal[,-1])
rownames(matriz_proveedores) <- red_temporal$RUC
# Correlaci√≥n entre patrones de gasto
correlacion_proveedores <- cor(t(matriz_proveedores))
# Crear red con correlaciones > 0.7
red_sospechosa <- graph_from_adjacency_matrix(
(correlacion_proveedores > 0.7) * correlacion_proveedores,
mode = "undirected",
weighted = TRUE,
diag = FALSE
)
# ================================================
# 2Ô∏è‚É£ Calcular m√©tricas y seleccionar el top 20
# ================================================
# Grado (n√∫mero de conexiones)
grados <- degree(red_sospechosa)
# Fuerza total (suma de correlaciones)
fuerza_total <- strength(red_sospechosa)
# Crear data frame con m√©tricas
metricas <- data.frame(
Proveedor = names(grados),
Grado = grados,
Fuerza = fuerza_total
) %>%
arrange(desc(Fuerza)) %>%
slice_head(n = 20)
# ================================================
# 3Ô∏è‚É£ Vincular nombres de proveedores (si existen)
# ================================================
# Verifica si existe una columna con nombre del proveedor
col_nombres <- intersect(names(datos), c("Nombre_Proveedor", "Razon_Social", "Proveedor_Nombre"))
if (length(col_nombres) > 0) {
nombres_unicos <- datos %>%
select(RUC, all_of(col_nombres[1])) %>%
distinct()
metricas <- metricas %>%
left_join(nombres_unicos, by = c("Proveedor" = "RUC")) %>%
mutate(
Etiqueta = paste0(!!sym(col_nombres[1]), "\n(", Proveedor, ")")
)
} else {
metricas <- metricas %>%
mutate(Etiqueta = paste0("Proveedor ", row_number(), "\n(", Proveedor, ")"))
}
library(dplyr)
library(ggplot2)
# Aseg√∫rate de que ambas columnas sean texto
datos <- datos %>%
mutate(Proveedor = as.character(Proveedor))
library(igraph)
library(ggraph)
library(dplyr)
library(lubridate)
library(tidyr)
library(ggplot2)
library(scales)
# ================================================
# 1Ô∏è‚É£ Crear la red de proveedores con patrones similares
# ================================================
red_temporal <- datos %>%
select(RUC, Fecha_Emision, Monto_limpio) %>%
mutate(Semana = floor_date(Fecha_Emision, "week")) %>%
group_by(RUC, Semana) %>%
summarise(Monto = sum(Monto_limpio), .groups = "drop") %>%
pivot_wider(names_from = Semana, values_from = Monto, values_fill = 0)
matriz_proveedores <- as.matrix(red_temporal[,-1])
rownames(matriz_proveedores) <- red_temporal$RUC
# Correlaci√≥n entre patrones de gasto
correlacion_proveedores <- cor(t(matriz_proveedores))
# Crear red con correlaciones > 0.7
red_sospechosa <- graph_from_adjacency_matrix(
(correlacion_proveedores > 0.7) * correlacion_proveedores,
mode = "undirected",
weighted = TRUE,
diag = FALSE
)
# ================================================
# 2Ô∏è‚É£ Calcular m√©tricas y seleccionar el top 20
# ================================================
# Grado (n√∫mero de conexiones)
grados <- degree(red_sospechosa)
# Fuerza total (suma de correlaciones)
fuerza_total <- strength(red_sospechosa)
# Crear data frame con m√©tricas
metricas <- data.frame(
Proveedor = names(grados),
Grado = grados,
Fuerza = fuerza_total
) %>%
arrange(desc(Fuerza)) %>%
slice_head(n = 20)
# ================================================
# 3Ô∏è‚É£ Vincular nombres de proveedores (si existen)
# ================================================
# Verifica si existe una columna con nombre del proveedor
col_nombres <- intersect(names(datos), c("Nombre_Proveedor", "Razon_Social", "Proveedor_Nombre"))
if (length(col_nombres) > 0) {
nombres_unicos <- datos %>%
select(RUC, all_of(col_nombres[1])) %>%
distinct()
metricas <- metricas %>%
left_join(nombres_unicos, by = c("Proveedor" = "RUC")) %>%
mutate(
Etiqueta = paste0(!!sym(col_nombres[1]), "\n(", Proveedor, ")")
)
} else {
metricas <- metricas %>%
mutate(Etiqueta = paste0("Proveedor ", row_number(), "\n(", Proveedor, ")"))
}
library(igraph)
library(ggraph)
library(dplyr)
library(lubridate)
library(tidyr)
library(ggplot2)
library(scales)
# ================================================
# 1Ô∏è‚É£ Crear la red de proveedores con patrones similares
# ================================================
# Convertimos RUC a character desde el inicio para evitar incompatibilidades
red_temporal <- datos %>%
mutate(RUC = as.character(RUC)) %>%
select(RUC, Fecha_Emision, Monto_limpio) %>%
mutate(Semana = floor_date(Fecha_Emision, "week")) %>%
group_by(RUC, Semana) %>%
summarise(Monto = sum(Monto_limpio, na.rm = TRUE), .groups = "drop") %>%
pivot_wider(names_from = Semana, values_from = Monto, values_fill = 0)
matriz_proveedores <- as.matrix(red_temporal[,-1])
rownames(matriz_proveedores) <- red_temporal$RUC
# Correlaci√≥n entre patrones de gasto
correlacion_proveedores <- cor(t(matriz_proveedores), use = "pairwise.complete.obs")
# Crear red con correlaciones > 0.7
adj_mat <- (correlacion_proveedores > 0.7) * correlacion_proveedores
diag(adj_mat) <- 0
red_sospechosa <- graph_from_adjacency_matrix(adj_mat, mode = "undirected", weighted = TRUE, diag = FALSE)
# ================================================
# 2Ô∏è‚É£ Calcular m√©tricas y seleccionar el top 20
# ================================================
# Grado (n√∫mero de conexiones)
grados <- degree(red_sospechosa)
# Fuerza total (suma de correlaciones)
fuerza_total <- strength(red_sospechosa)
# Crear data frame con m√©tricas (asegurando character)
metricas <- data.frame(
Proveedor = as.character(names(grados)),
Grado = as.integer(grados),
Fuerza = as.numeric(fuerza_total),
stringsAsFactors = FALSE
) %>%
arrange(desc(Fuerza)) %>%
slice_head(n = 20)
# ================================================
# 3Ô∏è‚É£ Vincular nombres de proveedores (si existen)
# ================================================
# Detectar columna de nombre en 'datos'
col_nombres <- intersect(names(datos), c("Nombre_Proveedor", "Razon_Social", "Proveedor_Nombre"))
if (length(col_nombres) > 0) {
# Aseguramos que RUC sea character en la tabla de nombres
nombres_unicos <- datos %>%
mutate(RUC = as.character(RUC)) %>%
select(RUC, all_of(col_nombres[1])) %>%
distinct()
# Convertir Proveedor a character antes de hacer join
metricas <- metricas %>%
mutate(Proveedor = as.character(Proveedor)) %>%
left_join(nombres_unicos, by = c("Proveedor" = "RUC")) %>%
mutate(
# Si el nombre viene NA, dejaremos solo el RUC
!!paste0("Etiqueta") := ifelse(
is.na(.[[col_nombres[1]]]),
paste0("(", Proveedor, ")"),
paste0(.[[col_nombres[1]]], "\n(", Proveedor, ")")
)
)
} else {
metricas <- metricas %>%
mutate(Etiqueta = paste0("Proveedor ", row_number(), "\n(", Proveedor, ")"))
}
# ================================================
# 4Ô∏è‚É£ Subgrafo con los top 20 y pasar atributos
# ================================================
# Aseguramos que los v√©rtices a inducir existan en la red original
v_presentes <- intersect(metricas$Proveedor, V(red_sospechosa)$name)
sub_red <- induced_subgraph(red_sospechosa, vids = v_presentes)
# Asignar la fuerza como atributo de v√©rtice en el subgrafo (para usar en aes)
V(sub_red)$Fuerza <- fuerza_total[V(sub_red)$name]
# Tambi√©n asignar etiqueta (si metricas no tiene alguno por NA, crear fallback)
labels_map <- metricas %>% filter(Proveedor %in% V(sub_red)$name) %>% select(Proveedor, Etiqueta)
V(sub_red)$Etiqueta <- labels_map$Etiqueta[match(V(sub_red)$name, labels_map$Proveedor)]
V(sub_red)$Etiqueta[is.na(V(sub_red)$Etiqueta)] <- paste0("(", V(sub_red)$name[is.na(V(sub_red)$Etiqueta)], ")")
# ================================================
# 5Ô∏è‚É£ Visualizaci√≥n elegante con ggraph (usa atributos del subgrafo)
# ================================================
set.seed(123)
ggraph(sub_red, layout = "fr") +
geom_edge_link(aes(width = weight, alpha = weight), color = "#5DADE2") +
geom_node_point(aes(size = Fuerza), color = "#E74C3C") +
geom_node_text(aes(label = Etiqueta), repel = TRUE, size = 3, color = "black", fontface = "bold") +
scale_edge_width_continuous(range = c(0.2, 2), guide = "none") +
scale_size_continuous(range = c(4, 10)) +
theme_void() +
labs(
title = "üî• Top 20 Proveedores con Patrones de Gasto Similares",
subtitle = "Tama√±o del nodo = Fuerza total de correlaci√≥n | Color de l√≠neas = nivel de similitud",
caption = "Fuente: An√°lisis de correlaci√≥n temporal entre proveedores"
) +
theme(
plot.title = element_text(face = "bold", size = 16, color = "#1A5276"),
plot.subtitle = element_text(size = 11, color = "#2E4053"),
plot.caption = element_text(size = 8, color = "#7F8C8D")
)
# ================================================
# 6Ô∏è‚É£ Mostrar tabla ordenada con los puntajes (incluye nombre si existe)
# ================================================
tabla_final <- metricas %>%
arrange(desc(Fuerza)) %>%
mutate(Rank = row_number()) %>%
select(Rank, everything())
tabla_final
