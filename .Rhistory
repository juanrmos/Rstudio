Q1 <- quantile(datos_completos$Monto_limpio, 0.25)
Q3 <- quantile(datos_completos$Monto_limpio, 0.75)
IQR_val <- Q3 - Q1
limite_superior <- Q3 + 1.5 * IQR_val
outliers <- datos_completos %>%
filter(Monto_limpio > limite_superior) %>%
arrange(desc(Monto_limpio)) %>%
select(Numero_Orden, Fecha_Emision, Razon_Social, Monto_limpio,
Tipo_Contratacion, Estado)
# Detectar fraccionamiento
# Definición: Mismo proveedor, órdenes cercanas en tiempo, montos similares
fraccionamiento <- datos_completos %>%
arrange(RUC, Fecha_Emision) %>%
group_by(RUC) %>%
filter(n() >= 2) %>%
mutate(
Dias_Desde_Anterior = as.numeric(Fecha_Emision - lag(Fecha_Emision)),
Monto_Anterior = lag(Monto_limpio),
Ratio_Monto = ifelse(!is.na(Monto_Anterior) & Monto_Anterior > 0,
Monto_limpio / Monto_Anterior, NA)
) %>%
filter(
!is.na(Dias_Desde_Anterior),
Dias_Desde_Anterior <= 30,  # Órdenes en mismo mes
Ratio_Monto >= 0.7 & Ratio_Monto <= 1.3  # Montos similares (±30%)
) %>%
ungroup()
casos_fraccionamiento <- fraccionamiento %>%
group_by(RUC, Razon_Social) %>%
summarise(
Casos = n(),
Monto_Total = sum(Monto_limpio),
Ejemplo_Fecha1 = min(Fecha_Emision),
Ejemplo_Fecha2 = max(Fecha_Emision),
.groups = 'drop'
) %>%
arrange(desc(Casos))
# GRÁFICO 4: Distribución de montos
g4 <- ggplot(datos_completos, aes(x = Monto_limpio/1000)) +
geom_histogram(bins = 50, fill = "#3498db", alpha = 0.7) +
geom_vline(xintercept = limite_superior/1000,
color = "red", linetype = "dashed", linewidth = 1) +
scale_x_continuous(labels = comma, limits = c(0, limite_superior/1000 * 1.5)) +
labs(
title = "Distribución de Montos de Órdenes",
subtitle = paste0("Línea roja: límite superior (",
round(limite_superior/1000, 0), "k) - ",
nrow(outliers), " órdenes atípicas"),
x = "Monto (Miles S/)",
y = "Frecuencia"
) +
theme_minimal() +
theme(plot.title = element_text(face = "bold"))
ggsave("outputs/mod3_distribucion_montos.png", g4, width = 10, height = 6, dpi = 300)
# Guardar resultados
resultados_mod3 <- list(
num_outliers = nrow(outliers),
monto_outliers = sum(outliers$Monto_limpio),
top_outliers = outliers %>% head(5),
num_casos_fraccionamiento = nrow(casos_fraccionamiento),
top_fraccionamiento = casos_fraccionamiento %>% head(5)
)
saveRDS(resultados_mod3, "outputs/mod3_resultados.rds")
cat(paste0(
"• Se detectaron ", nrow(outliers), " órdenes con montos atípicos (>",
round(limite_superior/1000, 0), "k)\n",
"• Monto total en órdenes atípicas: S/ ",
format(sum(outliers$Monto_limpio), big.mark = ","), "\n",
"• Se identificaron ", nrow(casos_fraccionamiento),
" proveedores con posible fraccionamiento de contratos\n",
"• Esto ",
ifelse(nrow(casos_fraccionamiento) > 10,
"SUGIERE una práctica sistemática de evasión de límites de contratación",
"muestra algunos casos aislados que requieren revisión")
))
# Análisis de registros fuera de plazo
fuera_plazo_resumen <- datos %>%
group_by(Año) %>%
summarise(
Total = n(),
Fuera_Plazo = sum(Fuera_Plazo),
Pct_Fuera_Plazo = mean(Fuera_Plazo) * 100,
.groups = 'drop'
)
# Análisis de órdenes anuladas
anuladas_resumen <- datos %>%
filter(Anulada) %>%
group_by(Año) %>%
summarise(
Ordenes_Anuladas = n(),
Monto_Anulado = sum(Monto_limpio),
.groups = 'drop'
)
# Análisis por tipo de contratación
por_tipo <- datos_completos %>%
group_by(Tipo_Contratacion) %>%
summarise(
Ordenes = n(),
Monto_Total = sum(Monto_limpio),
Pct_Fuera_Plazo = mean(Fuera_Plazo) * 100,
Pct_Anuladas = mean(Anulada) * 100,
.groups = 'drop'
) %>%
arrange(desc(Monto_Total))
# GRÁFICO 5: Cumplimiento de plazos
g5 <- ggplot(fuera_plazo_resumen, aes(x = factor(Año))) +
geom_col(aes(y = Total), fill = "#95a5a6", alpha = 0.5) +
geom_col(aes(y = Fuera_Plazo), fill = "#e74c3c", alpha = 0.8) +
geom_text(aes(y = Total, label = paste0(round(Pct_Fuera_Plazo, 1), "%")),
vjust = -0.5, fontface = "bold", size = 4) +
labs(
title = "Órdenes Registradas Fuera de Plazo por Año",
subtitle = "Rojo: Fuera de plazo | Gris: Dentro de plazo",
x = "Año",
y = "Número de Órdenes"
) +
theme_minimal() +
theme(plot.title = element_text(face = "bold"))
ggsave("outputs/mod4_cumplimiento_plazos.png", g5, width = 10, height = 6, dpi = 300)
# GRÁFICO 6: Por tipo de contratación
g6 <- ggplot(por_tipo %>% head(8),
aes(x = reorder(substr(Tipo_Contratacion, 1, 40), Monto_Total),
y = Monto_Total/1000000)) +
geom_col(fill = "#16a085", alpha = 0.8) +
coord_flip() +
labs(
title = "Gasto Total por Tipo de Contratación",
x = NULL,
y = "Monto Total (Millones S/)"
) +
theme_minimal() +
theme(plot.title = element_text(face = "bold"))
ggsave("outputs/mod4_por_tipo.png", g6, width = 10, height = 7, dpi = 300)
# Guardar resultados
resultados_mod4 <- list(
pct_fuera_plazo_global = mean(datos$Fuera_Plazo) * 100,
pct_anuladas_global = mean(datos$Anulada) * 100,
total_anuladas = sum(datos$Anulada),
monto_anulado = sum(datos$Monto_limpio[datos$Anulada]),
por_tipo = por_tipo
)
saveRDS(resultados_mod4, "outputs/mod4_resultados.rds")
cat(paste0(
"• ", round(resultados_mod4$pct_fuera_plazo_global, 1),
"% de TODAS las órdenes están registradas fuera de plazo\n",
"• ", resultados_mod4$total_anuladas,
" órdenes anuladas por un monto de S/ ",
format(resultados_mod4$monto_anulado, big.mark = ","), "\n",
"• Esto ",
ifelse(resultados_mod4$pct_fuera_plazo_global > 50,
"REVELA un incumplimiento sistemático de procedimientos administrativos",
"muestra debilidades en la gestión administrativa")
))
# Cargar todos los resultados
mod1 <- readRDS("outputs/mod1_resultados.rds")
mod2 <- readRDS("outputs/mod2_resultados.rds")
mod3 <- readRDS("outputs/mod3_resultados.rds")
mod4 <- readRDS("outputs/mod4_resultados.rds")
# Crear score de riesgo integral
score_final <- data.frame(
Indicador = c(
"Concentración de mercado (IHH)",
"Concentración fin de año",
"Órdenes atípicas detectadas",
"Casos de fraccionamiento",
"Incumplimiento de plazos"
),
Valor = c(
mod1$IHH,
mod2$promedio_fin_año,
mod3$num_outliers,
mod3$num_casos_fraccionamiento,
mod4$pct_fuera_plazo_global
),
Nivel_Riesgo = c(
ifelse(mod1$IHH > 2500, "ALTO", ifelse(mod1$IHH > 1000, "MEDIO", "BAJO")),
ifelse(mod2$promedio_fin_año > 30, "ALTO", "MEDIO"),
ifelse(mod3$num_outliers > 100, "ALTO", ifelse(mod3$num_outliers > 50, "MEDIO", "BAJO")),
ifelse(mod3$num_casos_fraccionamiento > 10, "ALTO", "BAJO"),
ifelse(mod4$pct_fuera_plazo_global > 50, "ALTO",
ifelse(mod4$pct_fuera_plazo_global > 20, "MEDIO", "BAJO"))
)
)
# Contar indicadores en riesgo ALTO
indicadores_alto_riesgo <- sum(score_final$Nivel_Riesgo == "ALTO")
saveRDS(score_final, "outputs/score_final.rds")
cat("\n========================================\n")
cat("CONCLUSIÓN FINAL DEL ANÁLISIS\n")
cat("========================================\n\n")
cat(paste0(
"Con base en el análisis de ", format(nrow(datos), big.mark = ","),
" órdenes de compra (2021-2025),\n",
"se identificaron ", indicadores_alto_riesgo, " de 5 indicadores en RIESGO ALTO:\n\n"
))
print(score_final)
cat("\n\nVEREDICTO:\n")
if (indicadores_alto_riesgo >= 3) {
cat("❌ EXISTE EVIDENCIA SIGNIFICATIVA de irregularidades que sugieren\n")
cat("   posibles prácticas de corrupción o deficiencias graves en la gestión.\n")
cat("   Se recomienda auditoría externa inmediata.\n")
} else if (indicadores_alto_riesgo >= 2) {
cat("⚠️  EXISTEN SEÑALES DE ALERTA que requieren investigación más profunda.\n")
cat("   Se recomienda revisión detallada de los casos identificados.\n")
} else {
cat("✓ No se encontró evidencia contundente de corrupción sistemática,\n")
cat("  aunque se identificaron áreas de mejora en la gestión administrativa.\n")
}
library(dplyr)
library(knitr)
library(kableExtra)
# Cargar resultados de operaciones
resumen_general <- readRDS("outputs/resumen_general.rds")
mod1 <- readRDS("outputs/mod1_resultados.rds")
mod2 <- readRDS("outputs/mod2_resultados.rds")
mod3 <- readRDS("outputs/mod3_resultados.rds")
mod4 <- readRDS("outputs/mod4_resultados.rds")
score_final <- readRDS("outputs/score_final.rds")
tibble(
Métrica = c(
"Total de órdenes analizadas",
"Proveedores únicos",
"Monto total contratado",
"Monto promedio por orden",
"Órdenes fuera de plazo",
"Órdenes anuladas"
),
Valor = c(
format(resumen_general$Total_Ordenes, big.mark = ","),
format(resumen_general$Total_Proveedores, big.mark = ","),
paste("S/", format(round(resumen_general$Monto_Total/1e6, 2), big.mark = ","), "M"),
paste("S/", format(round(resumen_general$Monto_Promedio/1000, 1), big.mark = ","), "k"),
paste0(format(resumen_general$Ordenes_Fuera_Plazo, big.mark = ","),
" (", round(resumen_general$Pct_Fuera_Plazo, 1), "%)"),
paste0(format(resumen_general$Ordenes_Anuladas, big.mark = ","),
" (", round(resumen_general$Pct_Anuladas, 1), "%)")
)
) %>%
kable(align = c("l", "r"),
col.names = c("", ""),
escape = FALSE) %>%
kable_styling(bootstrap_options = c("striped", "hover"),
full_width = FALSE,
font_size = 14) %>%
row_spec(0, bold = TRUE, background = "#2c3e50", color = "white") %>%
row_spec(c(5, 6), background = "#ffe6e6")
mod1$top10 %>%
head(5) %>%
mutate(
Monto_Total = paste("S/", format(round(Monto_Total/1000, 0), big.mark = ","), "k"),
Participacion = paste0(round(Participacion, 2), "%")
) %>%
select(-RUC) %>%
kable(col.names = c("Razón Social", "Monto Total", "% Mercado", "N° Órdenes"),
align = c("l", "r", "r", "r")) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
row_spec(0, bold = TRUE, background = "#3498db", color = "white")
tibble(
Indicador = c(
"Promedio de gasto en Nov-Dic",
"Años con concentración >30%"
),
Resultado = c(
paste0(round(mod2$promedio_fin_año, 1), "%"),
ifelse(length(mod2$años_alerta_fin_año) > 0,
paste(mod2$años_alerta_fin_año, collapse = ", "),
"Ninguno")
)
) %>%
kable(col.names = c("", ""),
align = c("l", "r")) %>%
kable_styling(bootstrap_options = c("striped", "hover"),
full_width = FALSE,
font_size = 14) %>%
row_spec(0, bold = TRUE)
mod3$top_outliers %>%
mutate(
Fecha_Emision = format(Fecha_Emision, "%d/%m/%Y"),
Monto_limpio = paste("S/", format(round(Monto_limpio/1000, 0), big.mark = ","), "k"),
Razon_Social = substr(Razon_Social, 1, 40)
) %>%
select(Numero_Orden, Fecha_Emision, Razon_Social, Monto_limpio, Estado) %>%
kable(col.names = c("N° Orden", "Fecha", "Proveedor", "Monto", "Estado"),
align = c("r", "c", "l", "r", "c")) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
row_spec(0, bold = TRUE, background = "#e74c3c", color = "white")
if(nrow(mod3$top_fraccionamiento) > 0) {
mod3$top_fraccionamiento %>%
mutate(
Monto_Total = paste("S/", format(round(Monto_Total/1000, 0), big.mark = ","), "k"),
Razon_Social = substr(Razon_Social, 1, 40),
Rango_Fechas = paste(format(Ejemplo_Fecha1, "%d/%m/%Y"), "-",
format(Ejemplo_Fecha2, "%d/%m/%Y"))
) %>%
select(Razon_Social, Casos, Monto_Total, Rango_Fechas) %>%
kable(col.names = c("Proveedor", "N° Casos", "Monto Total", "Periodo"),
align = c("l", "r", "r", "c")) %>%
kable_styling(bootstrap_options = c("striped", "hover")) %>%
row_spec(0, bold = TRUE, background = "#f39c12", color = "white")
} else {
cat("No se detectaron casos significativos de fraccionamiento.")
}
tibble(
Indicador = c(
"Total de órdenes anuladas",
"Monto total anulado",
"Porcentaje del total"
),
Valor = c(
format(mod4$total_anuladas, big.mark = ","),
paste("S/", format(round(mod4$monto_anulado/1e6, 2), big.mark = ","), "M"),
paste0(round(mod4$pct_anuladas_global, 2), "%")
)
) %>%
kable(col.names = c("", ""),
align = c("l", "r")) %>%
kable_styling(bootstrap_options = c("striped", "hover"),
full_width = FALSE,
font_size = 14) %>%
row_spec(0, bold = TRUE)
score_final %>%
mutate(
Valor = case_when(
row_number() == 1 ~ format(round(Valor, 0), big.mark = ","),
row_number() == 2 ~ paste0(round(Valor, 1), "%"),
TRUE ~ as.character(round(Valor, 0))
),
Nivel_Riesgo = cell_spec(
Nivel_Riesgo,
background = case_when(
Nivel_Riesgo == "ALTO" ~ "#e74c3c",
Nivel_Riesgo == "MEDIO" ~ "#f39c12",
TRUE ~ "#27ae60"
),
color = "white",
bold = TRUE
)
) %>%
kable(escape = FALSE,
col.names = c("Indicador", "Valor", "Nivel de Riesgo"),
align = c("l", "r", "c")) %>%
kable_styling(bootstrap_options = c("striped", "hover"),
full_width = TRUE,
font_size = 14) %>%
row_spec(0, bold = TRUE, background = "#2c3e50", color = "white")
indicadores_alto <- sum(score_final$Nivel_Riesgo == "ALTO")
if (indicadores_alto >= 3) {
cat("::: {.callout-important icon=false}\n")
cat("## ❌ EVIDENCIA SIGNIFICATIVA DE IRREGULARIDADES\n\n")
cat("Con base en el análisis cuantitativo, se identificaron **", indicadores_alto,
" de 5 indicadores** en nivel de **RIESGO ALTO**.\n\n")
cat("### Señales de alerta identificadas:\n\n")
cat("1. ", ifelse(score_final$Nivel_Riesgo[1] == "ALTO",
"✘ Alta concentración de mercado sugiere posible direccionamiento\n", ""), sep="")
cat("2. ", ifelse(score_final$Nivel_Riesgo[2] == "ALTO",
"✘ Ejecución apresurada al final del año\n", ""), sep="")
cat("3. ", ifelse(score_final$Nivel_Riesgo[3] == "ALTO",
"✘ Múltiples órdenes con montos atípicos\n", ""), sep="")
cat("4. ", ifelse(score_final$Nivel_Riesgo[4] == "ALTO",
"✘ Fraccionamiento sistemático de contratos\n", ""), sep="")
cat("5. ", ifelse(score_final$Nivel_Riesgo[5] == "ALTO",
"✘ Incumplimiento masivo de procedimientos\n", ""), sep="")
cat("\n### 📋 Recomendaciones:\n\n")
cat("- 🔍 Auditoría externa inmediata e independiente\n")
cat("- 👥 Investigación de los proveedores identificados\n")
cat("- 📊 Revisión de controles internos y procesos\n")
cat("- ⚖️ Evaluación legal de posibles responsabilidades\n")
cat(":::\n")
} else if (indicadores_alto >= 2) {
cat("::: {.callout-warning icon=false}\n")
cat("## ⚠️ SEÑALES DE ALERTA DETECTADAS\n\n")
cat("Se identificaron **", indicadores_alto,
" indicadores** en riesgo alto que requieren investigación más profunda.\n\n")
cat("### Recomendaciones:\n\n")
cat("- Revisión detallada de los casos específicos identificados\n")
cat("- Fortalecimiento de controles internos\n")
cat("- Capacitación en procedimientos administrativos\n")
cat(":::\n")
} else {
cat("::: {.callout-tip icon=false}\n")
cat("## ✓ RIESGO BAJO A MODERADO\n\n")
cat("No se encontró evidencia contundente de corrupción sistemática.\n\n")
cat("Se identificaron áreas de mejora en la gestión administrativa que deben ser atendidas.\n")
cat(":::\n")
}
score_final %>%
mutate(
Valor = case_when(
row_number() == 1 ~ format(round(Valor, 0), big.mark = ","),
row_number() == 2 ~ paste0(round(Valor, 1), "%"),
TRUE ~ as.character(round(Valor, 0))
),
Nivel_Riesgo = cell_spec(
Nivel_Riesgo,
background = case_when(
Nivel_Riesgo == "ALTO" ~ "#e74c3c",
Nivel_Riesgo == "MEDIO" ~ "#f39c12",
TRUE ~ "#27ae60"
),
color = "white",
bold = TRUE
)
) %>%
kable(escape = FALSE,
col.names = c("Indicador", "Valor", "Nivel de Riesgo"),
align = c("l", "r", "c")) %>%
kable_styling(bootstrap_options = c("striped", "hover"),
full_width = TRUE,
font_size = 14) %>%
row_spec(0, bold = TRUE, background = "#2c3e50", color = "white")
# 2. Verificar que existe el archivo de datos
if (file.exists("DRTC-H.xlsx")) {
cat("✓ Archivo DRTC-H.xlsx encontrado\n")
} else {
cat("✗ ERROR: No se encuentra el archivo DRTC-H.xlsx\n")
cat("  Por favor, coloca el archivo en la misma carpeta que este script\n")
stop("Archivo de datos no encontrado")
}
# Script de Configuración Inicial
# Ejecuta este script ANTES de correr los análisis
# 1. Crear carpeta de outputs si no existe
if (!dir.exists("outputs")) {
dir.create("outputs")
cat("✓ Carpeta 'outputs' creada exitosamente\n")
} else {
cat("✓ Carpeta 'outputs' ya existe\n")
}
# 2. Verificar que existe el archivo de datos
if (file.exists("DRTC-H.xlsx")) {
cat("✓ Archivo DRTC-H.xlsx encontrado\n")
} else {
cat("✗ ERROR: No se encuentra el archivo DRTC-H.xlsx\n")
cat("  Por favor, coloca el archivo en la misma carpeta que este script\n")
stop("Archivo de datos no encontrado")
}
# 3. Instalar/cargar paquetes necesarios
paquetes_necesarios <- c(
"readxl", "dplyr", "ggplot2", "lubridate",
"stringr", "scales", "tidyr", "forcats",
"knitr", "kableExtra"
)
cat("\nVerificando paquetes necesarios...\n")
for (pkg in paquetes_necesarios) {
if (!require(pkg, character.only = TRUE, quietly = TRUE)) {
cat(paste0("Instalando ", pkg, "...\n"))
install.packages(pkg, dependencies = TRUE)
} else {
cat(paste0("✓ ", pkg, " ya está instalado\n"))
}
}
# 4. Resumen
cat("\n========================================\n")
cat("CONFIGURACIÓN COMPLETADA\n")
cat("========================================\n\n")
cat("Puedes proceder a ejecutar los análisis:\n")
cat("1. Renderiza 'operaciones.qmd' primero\n")
cat("2. Luego renderiza 'presentacion.qmd'\n\n")
cat("¡Buena suerte con tu investigación! 🎓\n")
indicadores_alto <- sum(score_final$Nivel_Riesgo == "ALTO")
if (indicadores_alto >= 3) {
cat("::: {.callout-important icon=false}\n")
cat("## ❌ EVIDENCIA SIGNIFICATIVA DE IRREGULARIDADES\n\n")
cat("Con base en el análisis cuantitativo, se identificaron **", indicadores_alto,
" de 5 indicadores** en nivel de **RIESGO ALTO**.\n\n")
cat("### Señales de alerta identificadas:\n\n")
cat("1. ", ifelse(score_final$Nivel_Riesgo[1] == "ALTO",
"✘ Alta concentración de mercado sugiere posible direccionamiento\n", ""), sep="")
cat("2. ", ifelse(score_final$Nivel_Riesgo[2] == "ALTO",
"✘ Ejecución apresurada al final del año\n", ""), sep="")
cat("3. ", ifelse(score_final$Nivel_Riesgo[3] == "ALTO",
"✘ Múltiples órdenes con montos atípicos\n", ""), sep="")
cat("4. ", ifelse(score_final$Nivel_Riesgo[4] == "ALTO",
"✘ Fraccionamiento sistemático de contratos\n", ""), sep="")
cat("5. ", ifelse(score_final$Nivel_Riesgo[5] == "ALTO",
"✘ Incumplimiento masivo de procedimientos\n", ""), sep="")
cat("\n### 📋 Recomendaciones:\n\n")
cat("- 🔍 Auditoría externa inmediata e independiente\n")
cat("- 👥 Investigación de los proveedores identificados\n")
cat("- 📊 Revisión de controles internos y procesos\n")
cat("- ⚖️ Evaluación legal de posibles responsabilidades\n")
cat(":::\n")
} else if (indicadores_alto >= 2) {
cat("::: {.callout-warning icon=false}\n")
cat("## ⚠️ SEÑALES DE ALERTA DETECTADAS\n\n")
cat("Se identificaron **", indicadores_alto,
" indicadores** en riesgo alto que requieren investigación más profunda.\n\n")
cat("### Recomendaciones:\n\n")
cat("- Revisión detallada de los casos específicos identificados\n")
cat("- Fortalecimiento de controles internos\n")
cat("- Capacitación en procedimientos administrativos\n")
cat(":::\n")
} else {
cat("::: {.callout-tip icon=false}\n")
cat("## ✓ RIESGO BAJO A MODERADO\n\n")
cat("No se encontró evidencia contundente de corrupción sistemática.\n\n")
cat("Se identificaron áreas de mejora en la gestión administrativa que deben ser atendidas.\n")
cat(":::\n")
}
library(dplyr)
library(knitr)
library(kableExtra)
# Cargar resultados de operaciones
resumen_general <- readRDS("outputs/resumen_general.rds")
library(dplyr)
library(knitr)
library(kableExtra)
# Cargar resultados de operaciones
resumen_general <- readRDS("outputs/resumen_general.rds")
library(dplyr)
library(knitr)
library(kableExtra)
# Cargar resultados de operaciones
resumen_general <- readRDS("outputs/resumen_general.rds")
