Score_Nuevo + Score_Una_Orden
) %>%
filter(SCORE_RIESGO_TOTAL >= 3) %>%
select(RUC, Razon_Social, Monto_Total, Num_Ordenes, Participacion_Mercado,
Casos_Fraccionamiento, Es_Nuevo_2023, SCORE_RIESGO_TOTAL) %>%
arrange(desc(SCORE_RIESGO_TOTAL), desc(Monto_Total))
print(head(score_integral, 20))
# ========================================
# 9. VISUALIZACIONES CLAVE
# ========================================
# A. Timeline de anomalías
timeline_anomalias <- ggplot(analisis_temporal, aes(x = Año_Mes, y = Monto_Mensual/1000000)) +
geom_line(color = "#34495e", linewidth = 1) +
geom_point(data = meses_anomalos,
aes(x = Año_Mes, y = Monto_Mensual/1000000),
color = "red", size = 4) +
geom_hline(yintercept = limite_superior/1000000,
linetype = "dashed", color = "red", alpha = 0.5) +
geom_vline(xintercept = as.Date("2023-01-01"),
linetype = "dashed", color = "blue", alpha = 0.5) +
annotate("text", x = as.Date("2023-01-01"), y = max(analisis_temporal$Monto_Mensual/1000000),
label = "Cambio de Gestión", angle = 90, vjust = -0.5, color = "blue") +
labs(title = "Timeline de Gastos con Detección de Anomalías",
subtitle = "Línea roja = Límite de 3 sigmas | Puntos rojos = Meses anómalos",
x = "Mes", y = "Monto (Millones S/)") +
theme_minimal()
timeline_anomalias
# B. Mapa de calor de riesgo por mes y tipo
mapa_calor <- datos_con_periodo %>%
group_by(Año, Mes, Contratacion_Corto) %>%
summarise(
Monto_Total = sum(Monto_limpio)/1000000,
.groups = 'drop'
) %>%
ggplot(aes(x = factor(Mes), y = Contratacion_Corto, fill = Monto_Total)) +
geom_tile() +
facet_wrap(~Año) +
scale_fill_gradient2(low = "white", mid = "orange", high = "red",
midpoint = median(datos_con_periodo$Monto_limpio/1000000)) +
labs(title = "Mapa de Calor: Concentración de Gastos",
x = "Mes", y = "Tipo de Contratación",
fill = "Monto\n(Millones S/)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
mapa_calor
# Clasificación por tipo de proveedor
datos <- datos %>%
mutate(Tipo_Proveedor = case_when(
str_starts(RUC, "10") ~ "Persona Natural",
str_starts(RUC, "20") ~ "Persona Jurídica",
TRUE ~ "Otro"
))
# Tabla de frecuencias por tipo de proveedor
cat("\n\nTABLA DE FRECUENCIAS POR TIPO DE PROVEEDOR:\n")
cat("-------------------------------------------\n")
tabla_tipo_proveedor <- datos %>%
group_by(Tipo_Proveedor) %>%
summarise(
Num_Ordenes = n(),
Porcentaje_Ordenes = n() / nrow(datos) * 100,
Monto_Total = sum(Monto_limpio),
Porcentaje_Monto = sum(Monto_limpio) / sum(datos$Monto_limpio) * 100,
Monto_Promedio = mean(Monto_limpio),
Num_Proveedores_Unicos = n_distinct(RUC)
) %>%
mutate(across(where(is.numeric), ~round(., 2)))
print(tabla_tipo_proveedor)
# Distribución temporal
cat("\n\nDISTRIBUCIÓN TEMPORAL:\n")
cat("----------------------\n")
rango_fechas <- datos %>%
summarise(
Fecha_Inicio = min(Fecha_Emision),
Fecha_Fin = max(Fecha_Emision),
Dias_Totales = as.numeric(max(Fecha_Emision) - min(Fecha_Emision)),
Años_Completos = n_distinct(year(Fecha_Emision))
)
print(rango_fechas)
datos <- datos %>%
mutate(Año = year(Fecha_Emision))
# Análisis por año
comparacion_anual <- datos %>%
group_by(Año) %>%
summarise(
Num_Ordenes = n(),
Monto_Total = sum(Monto_limpio),
Monto_Promedio = mean(Monto_limpio),
Mediana_Monto = median(Monto_limpio),
Desv_Estandar = sd(Monto_limpio),
Proveedores_Unicos = n_distinct(RUC),
Tipos_Contratacion = n_distinct(Tipo_Contratacion),
Ordenes_Por_Proveedor = n() / n_distinct(RUC),
Monto_Max = max(Monto_limpio),
Monto_Min = min(Monto_limpio)
) %>%
arrange(Año)
print(comparacion_anual)
# Calcular tasas de crecimiento
comparacion_anual <- comparacion_anual %>%
mutate(
Crecimiento_Monto_Pct = (Monto_Total - lag(Monto_Total)) / lag(Monto_Total) * 100,
Crecimiento_Ordenes_Pct = (Num_Ordenes - lag(Num_Ordenes)) / lag(Num_Ordenes) * 100,
Crecimiento_Proveedores_Pct = (Proveedores_Unicos - lag(Proveedores_Unicos)) / lag(Proveedores_Unicos) * 100
)
cat("\nTASAS DE CRECIMIENTO ANUAL:\n")
cat("---------------------------\n")
print(comparacion_anual %>%
select(Año, Crecimiento_Monto_Pct, Crecimiento_Ordenes_Pct, Crecimiento_Proveedores_Pct))
# Análisis mensual para detectar picos
analisis_mensual <- datos %>%
mutate(Año_Mes = floor_date(Fecha_Emision, "month")) %>%
group_by(Año_Mes) %>%
summarise(
Monto_Mensual = sum(Monto_limpio),
Num_Ordenes = n(),
.groups = 'drop'
) %>%
mutate(
Cambio_Mensual = (Monto_Mensual - lag(Monto_Mensual)) / lag(Monto_Mensual) * 100
)
# Identificar picos y caídas (>50% cambio)
picos_caidas <- analisis_mensual %>%
filter(abs(Cambio_Mensual) > 50, !is.na(Cambio_Mensual)) %>%
mutate(
Tipo = ifelse(Cambio_Mensual > 0, "PICO", "CAÍDA"),
Mes_Año = format(Año_Mes, "%b-%Y")
)
print(picos_caidas %>% select(Mes_Año, Tipo, Cambio_Mensual, Monto_Mensual))
# Gráfico de evolución anual
grafico_evolucion <- ggplot(comparacion_anual, aes(x = factor(Año))) +
geom_bar(aes(y = Monto_Total/1000000), stat = "identity", fill = "#3498db", alpha = 0.7) +
geom_line(aes(y = Num_Ordenes/10, group = 1), color = "#e74c3c", linewidth = 2) +
geom_point(aes(y = Num_Ordenes/10), color = "#e74c3c", linewidth = 3) +
scale_y_continuous(
name = "Monto Total (Millones S/)",
sec.axis = sec_axis(~.*10, name = "Número de Órdenes")
) +
labs(
title = "Evolución Anual del Gasto y Órdenes",
subtitle = "Barras = Monto Total | Línea = Número de Órdenes",
x = "Año"
) +
theme_minimal() +
theme(
plot.title = element_text(size = 14, face = "bold"),
axis.text.x = element_text(size = 11)
)
print(grafico_evolucion)
presupuesto_oficial <- data.frame(
Año = c(2023, 2024, 2025),
PIM = c(1999726251, 1961841636, 1905495522),  # Presupuesto Institucional Modificado
Ejecutado_Oficial = c(1839965157, 1866031196, 1232661856),  # Según reporte oficial
Porcentaje_Oficial = c(92.0, 95.1, 64.7)
)
# Calcular gasto real detectado
gasto_real_detectado <- datos %>%
group_by(Año) %>%
summarise(
Gasto_Detectado = sum(Monto_limpio),
.groups = 'drop'
)
analisis_presupuesto <- presupuesto_oficial %>%
left_join(gasto_real_detectado, by = "Año") %>%
mutate(
Gasto_Detectado = replace_na(Gasto_Detectado, 0),
Porcentaje_Detectado = (Gasto_Detectado / PIM) * 100,
Diferencia_Oficial_Detectado = Ejecutado_Oficial - Gasto_Detectado,
Porcentaje_No_Registrado = (Diferencia_Oficial_Detectado / Ejecutado_Oficial) * 100
)
print(analisis_presupuesto)
datos_graf_presupuesto <- analisis_presupuesto %>%
select(Año, PIM, Ejecutado_Oficial, Gasto_Detectado) %>%
pivot_longer(cols = c(PIM, Ejecutado_Oficial, Gasto_Detectado),
names_to = "Tipo", values_to = "Monto") %>%
mutate(Tipo = factor(Tipo, levels = c("PIM", "Ejecutado_Oficial", "Gasto_Detectado")))
grafico_presupuesto <- ggplot(datos_graf_presupuesto,
aes(x = factor(Año), y = Monto/1000000, fill = Tipo)) +
geom_bar(stat = "identity", position = "dodge", alpha = 0.8) +
scale_fill_manual(values = c("PIM" = "#95a5a6",
"Ejecutado_Oficial" = "#3498db",
"Gasto_Detectado" = "#e74c3c"),
labels = c("Presupuesto Modificado", "Ejecutado (Oficial)", "Detectado (Datos)")) +
labs(
title = "Comparación: Presupuesto vs. Ejecución vs. Detectado",
subtitle = "Diferencias significativas sugieren gastos no registrados o mal clasificados",
x = "Año",
y = "Monto (Millones S/)",
fill = "Tipo"
) +
theme_minimal() +
geom_text(aes(label = round(Monto/1000000, 0)),
position = position_dodge(width = 0.9),
vjust = -0.5, size = 3)
print(grafico_presupuesto)
# ========================================
# 4. ANÁLISIS DE FRACCIONAMIENTO POR TIPO
# ========================================
cat("\n\n=====================================\n")
cat("4. FRACCIONAMIENTO POR TIPO DE PROVEEDOR\n")
cat("=====================================\n\n")
# Detectar fraccionamiento por tipo de proveedor
fraccionamiento_por_tipo <- datos %>%
arrange(RUC, Fecha_Emision) %>%
group_by(RUC) %>%
mutate(
Dias_Entre_Ordenes = as.numeric(Fecha_Emision - lag(Fecha_Emision)),
Diferencia_Monto = abs(Monto_limpio - lag(Monto_limpio)),
Posible_Fraccionamiento = Dias_Entre_Ordenes <= 7 &
Diferencia_Monto < (Monto_limpio * 0.2) &
!is.na(Dias_Entre_Ordenes)
) %>%
filter(Posible_Fraccionamiento == TRUE) %>%
left_join(datos %>% select(RUC, Tipo_Proveedor) %>% distinct(), by = "RUC") %>%
mutate(Tipo_Proveedor = coalesce(Tipo_Proveedor.x, Tipo_Proveedor.y)) %>%
select(-Tipo_Proveedor.x, -Tipo_Proveedor.y)
resumen_fraccionamiento <- fraccionamiento_por_tipo %>%
group_by(Tipo_Proveedor) %>%
summarise(
Casos_Fraccionamiento = n(),
Monto_Total_Fraccionado = sum(Monto_limpio),
Monto_Promedio_Fraccion = mean(Monto_limpio),
Mediana_Fraccion = median(Monto_limpio),
Proveedores_Involucrados = n_distinct(RUC),
Dias_Promedio_Entre_Ordenes = mean(Dias_Entre_Ordenes, na.rm = TRUE),
.groups = 'drop'
) %>%
mutate(
Casos_Por_Proveedor = Casos_Fraccionamiento / Proveedores_Involucrados
)
print(resumen_fraccionamiento)
# Patrones de fraccionamiento
cat("\n\nPATRONES DE FRACCIONAMIENTO:\n")
cat("-----------------------------\n")
# Para personas naturales
fraccion_naturales <- fraccionamiento_por_tipo %>%
filter(Tipo_Proveedor == "Persona Natural") %>%
group_by(RUC, Razon_Social) %>%
summarise(
Casos = n(),
Monto_Total = sum(Monto_limpio),
Dias_Promedio = mean(Dias_Entre_Ordenes),
.groups = 'drop'
) %>%
arrange(desc(Casos)) %>%
head(10)
cat("\nTop 10 Personas Naturales con Fraccionamiento:\n")
print(fraccion_naturales)
# Para personas jurídicas
fraccion_juridicas <- fraccionamiento_por_tipo %>%
filter(Tipo_Proveedor == "Persona Jurídica") %>%
group_by(RUC, Razon_Social) %>%
summarise(
Casos = n(),
Monto_Total = sum(Monto_limpio),
Dias_Promedio = mean(Dias_Entre_Ordenes),
.groups = 'drop'
) %>%
arrange(desc(Casos)) %>%
head(10)
cat("\nTop 10 Personas Jurídicas con Fraccionamiento:\n")
print(fraccion_juridicas)
ggplot(datos, aes(x = Contratacion_Corto, y = Monto_limpio/1000, fill = Contratacion_Corto)) +
geom_boxplot(alpha = 0.7, outlier.color = "red") +
scale_y_continuous(labels = scales::comma) +
labs(title = "Distribución de Montos por Tipo de Contratación",
x = "Tipo de Contratación", y = "Monto (en miles de S/.)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none")
cat("\n\n=====================================\n")
cat("5. ANÁLISIS DE RELACIONES ENTRE VARIABLES\n")
cat("=====================================\n\n")
# Análisis por tipo de contratación
relacion_tipo_contratacion <- datos %>%
group_by(Tipo_Contratacion, Tipo_Proveedor) %>%
summarise(
Num_Ordenes = n(),
Monto_Total = sum(Monto_limpio),
Monto_Promedio = mean(Monto_limpio),
CV = sd(Monto_limpio) / mean(Monto_limpio),
.groups = 'drop'
) %>%
arrange(desc(Monto_Total))
cat("RELACIÓN TIPO CONTRATACIÓN - TIPO PROVEEDOR:\n")
cat("--------------------------------------------\n")
print(head(relacion_tipo_contratacion, 15))
datos_correlacion <- datos %>%
mutate(
Mes = month(Fecha_Emision),
Año = year(Fecha_Emision),
Trimestre = quarter(Fecha_Emision),
Es_Fin_Año = ifelse(Mes >= 11, 1, 0),
Es_Natural = ifelse(Tipo_Proveedor == "Persona Natural", 1, 0)
)
# Calcular correlaciones
correlaciones <- datos_correlacion %>%
select(Monto_limpio, Mes, Trimestre, Es_Fin_Año, Es_Natural) %>%
cor(use = "complete.obs")
print(round(correlaciones, 3))
patrones_sospechosos <- datos %>%
filter(Tipo_Proveedor == "Persona Natural") %>%
group_by(RUC) %>%
summarise(
Num_Ordenes = n(),
Monto_Total = sum(Monto_limpio),
Tipos_Contratacion_Diferentes = n_distinct(Tipo_Contratacion),
.groups = 'drop'
) %>%
filter(Tipos_Contratacion_Diferentes >= 3, Monto_Total > 100000) %>%
arrange(desc(Monto_Total))
print(head(patrones_sospechosos, 10))
cat("\n\n=====================================\n")
cat("6. DISTRIBUCIÓN DEL GASTO POR TIPO DE CONTRATACIÓN\n")
cat("=====================================\n\n")
# Distribución por año y tipo
distribucion_tipo_año <- datos %>%
group_by(Año, Tipo_Contratacion) %>%
summarise(
Monto_Total = sum(Monto_limpio),
Num_Ordenes = n(),
.groups = 'drop'
) %>%
group_by(Año) %>%
mutate(
Porcentaje_Monto = Monto_Total / sum(Monto_Total) * 100,
Porcentaje_Ordenes = Num_Ordenes / sum(Num_Ordenes) * 100
)
# Tabla resumen
tabla_distribucion <- distribucion_tipo_año %>%
select(Año, Tipo_Contratacion, Monto_Total, Porcentaje_Monto) %>%
arrange(Año, desc(Monto_Total)) %>%
group_by(Año) %>%
slice_head(n = 5)  # Top 5 por año
print(tabla_distribucion)
graf_absolutos <- ggplot(distribucion_tipo_año,
aes(x = factor(Año), y = Monto_Total/1000000,
fill = Tipo_Contratacion)) +  # Eliminar reorder()
geom_bar(stat = "identity", position = "stack") +
labs(
title = "Distribución del Gasto por Tipo de Contratación (Montos Absolutos)",
x = "Año",
y = "Monto (Millones S/)",
fill = "Tipo de Contratación"
) +
theme_minimal() +
scale_fill_brewer(palette = "Set3")
print(graf_absolutos)
cambios_distribucion <- distribucion_tipo_año %>%
group_by(Tipo_Contratacion) %>%
arrange(Año) %>%
mutate(
Cambio_Porcentaje = Porcentaje_Monto - lag(Porcentaje_Monto)
) %>%
filter(abs(Cambio_Porcentaje) > 5, !is.na(Cambio_Porcentaje))
cat("\n\nCAMBIOS SIGNIFICATIVOS EN DISTRIBUCIÓN (>5 puntos porcentuales):\n")
cat("----------------------------------------------------------------\n")
print(cambios_distribucion %>%
select(Tipo_Contratacion, Año, Porcentaje_Monto, Cambio_Porcentaje))
# ========================================
# 7. RANKING DE PROVEEDORES RELEVANTES
# ========================================
cat("\n\n=====================================\n")
cat("7. RANKING DE PROVEEDORES RELEVANTES\n")
cat("=====================================\n\n")
# Top 20 Personas Jurídicas
top_juridicas <- datos %>%
filter(Tipo_Proveedor == "Persona Jurídica") %>%
group_by(RUC, Razon_Social) %>%
summarise(
Monto_Total = sum(Monto_limpio),
Num_Ordenes = n(),
Primera_Orden = min(Fecha_Emision),
Ultima_Orden = max(Fecha_Emision),
Tipos_Contratacion = n_distinct(Tipo_Contratacion),
.groups = 'drop'
) %>%
# Agregar alertas
left_join(
casos_fraccionamiento %>%
select(RUC, Casos_Fraccionamiento = Casos_Detectados),
by = "RUC"
) %>%
left_join(
ordenes_precio_anomalo %>%
group_by(RUC) %>%
summarise(Ordenes_Sobreprecio = n(), .groups = 'drop'),
by = "RUC"
) %>%
mutate(
Casos_Fraccionamiento = replace_na(Casos_Fraccionamiento, 0),
Ordenes_Sobreprecio = replace_na(Ordenes_Sobreprecio, 0),
Alertas_Totales = Casos_Fraccionamiento + Ordenes_Sobreprecio,
Es_Nuevo_2023 = Primera_Orden >= as.Date("2023-01-01")
) %>%
arrange(desc(Monto_Total)) %>%
head(20)
cat("TOP 20 PERSONAS JURÍDICAS:\n")
cat("--------------------------\n")
print(top_juridicas %>%
select(RUC, Razon_Social, Monto_Total, Num_Ordenes,
Alertas_Totales, Es_Nuevo_2023) %>%
mutate(Monto_Total = round(Monto_Total, 0)))
# Top 20 Personas Naturales
top_naturales <- datos %>%
filter(Tipo_Proveedor == "Persona Natural") %>%
group_by(RUC, Razon_Social) %>%
summarise(
Monto_Total = sum(Monto_limpio),
Num_Ordenes = n(),
Primera_Orden = min(Fecha_Emision),
Ultima_Orden = max(Fecha_Emision),
Tipos_Contratacion = n_distinct(Tipo_Contratacion),
.groups = 'drop'
) %>%
# Agregar alertas
left_join(
casos_fraccionamiento %>%
select(RUC, Casos_Fraccionamiento = Casos_Detectados),
by = "RUC"
) %>%
left_join(
ordenes_precio_anomalo %>%
group_by(RUC) %>%
summarise(Ordenes_Sobreprecio = n(), .groups = 'drop'),
by = "RUC"
) %>%
mutate(
Casos_Fraccionamiento = replace_na(Casos_Fraccionamiento, 0),
Ordenes_Sobreprecio = replace_na(Ordenes_Sobreprecio, 0),
Alertas_Totales = Casos_Fraccionamiento + Ordenes_Sobreprecio,
Es_Nuevo_2023 = Primera_Orden >= as.Date("2023-01-01")
) %>%
arrange(desc(Monto_Total)) %>%
head(20)
cat("\n\nTOP 20 PERSONAS NATURALES:\n")
cat("--------------------------\n")
print(top_naturales %>%
select(RUC, Razon_Social, Monto_Total, Num_Ordenes,
Alertas_Totales, Es_Nuevo_2023) %>%
mutate(Monto_Total = round(Monto_Total, 0)))
# Proveedores con múltiples alertas
multi_alertas <- rbind(
top_juridicas %>% mutate(Tipo = "Jurídica"),
top_naturales %>% mutate(Tipo = "Natural")
) %>%
filter(Alertas_Totales >= 3) %>%
arrange(desc(Alertas_Totales), desc(Monto_Total))
cat("\n\nPROVEEDORES CON MÚLTIPLES ALERTAS (>=3):\n")
cat("----------------------------------------\n")
print(multi_alertas %>%
select(Tipo, RUC, Razon_Social, Monto_Total,
Casos_Fraccionamiento, Ordenes_Sobreprecio, Alertas_Totales))
library(treemapify)
concentracion_corto <- concentracion_proveedores %>%
head(20) %>%
mutate(Nombre_Corto = ifelse(nchar(Razon_Social) > 25,
paste0(substr(Razon_Social, 1, 22), "..."),
Razon_Social))
ggplot(concentracion_corto,
aes(area = Monto_Total, fill = Participacion_Mercado, label = Nombre_Corto)) +
geom_treemap() +
geom_treemap_text(colour = "white", place = "centre", grow = TRUE,
reflow = TRUE) +  # Agregar reflow
labs(title = "Top 20 Proveedores por Monto (Treemap)",
subtitle = "Área proporcional al monto total") +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
theme_minimal()
ggplot(score_integral, aes(x = Num_Ordenes, y = Monto_Total/1000000,
size = Participacion_Mercado, color = SCORE_RIESGO_TOTAL)) +
geom_point(alpha = 0.7) +
scale_size(range = c(3,12)) +
scale_color_gradient(low = "yellow", high = "red") +
labs(title = "Mapa de Riesgo de Proveedores",
x = "Número de Órdenes", y = "Monto Total (Millones S/)",
size = "% Participación en el mercado", color = "Score de Riesgo") +
theme_minimal()
serie_tiempo_contratacion <- datos %>%
mutate(Año_Mes = floor_date(Fecha_Emision, "month")) %>%
group_by(Año_Mes, Tipo_Contratacion) %>%
summarise(Monto_Mensual = sum(Monto_limpio), .groups = "drop")
Tiempo_contrataciones = ggplot(serie_tiempo_contratacion, aes(x = Año_Mes, y = Monto_Mensual/1000000,
color = Tipo_Contratacion)) +
geom_line(linewidth = 1.2) +
labs(title = "Evolución Mensual del Gasto por Tipo de Contratación",
x = "Fecha", y = "Monto (Millones S/)") +
theme_minimal()
ggsave("mi_grafico_largo.png", plot = Tiempo_contrataciones, width = 10, height = 8, units = "in", dpi = 300)
gasto_proveedor_anual <- datos %>%
group_by(Año, Tipo_Proveedor) %>%
summarise(Monto_Total = sum(Monto_limpio), .groups = "drop")
ggplot(gasto_proveedor_anual, aes(x = factor(Año), y = Monto_Total/1000000,
fill = Tipo_Proveedor)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Distribución del Gasto por Tipo de Proveedor",
x = "Año", y = "Monto (Millones S/)") +
scale_fill_manual(values = c("Persona Natural" = "#f39c12",
"Persona Jurídica" = "#2980b9",
"Otro" = "#7f8c8d")) +
theme_minimal()
cat(paste("✓ Total de órdenes analizadas:", nrow(datos), "\n"))
cat(paste("✓ Periodo:", min(datos$Fecha_Emision), "a", max(datos$Fecha_Emision), "\n"))
cat(paste("✓ Monto total:", format(sum(datos$Monto_limpio), big.mark = ","), "soles\n"))
cat(paste("✓ Proveedores únicos:", n_distinct(datos$RUC), "\n\n"))
cat("🔴 ALERTAS CRÍTICAS:\n")
cat("-------------------\n")
cat(paste("• Proveedores con fraccionamiento:", nrow(casos_fraccionamiento), "\n"))
cat(paste("• Órdenes con sobreprecio:", nrow(ordenes_precio_anomalo), "\n"))
cat(paste("• Sobreprecio máximo detectado:",
round(max(ordenes_precio_anomalo$Sobreprecio_Porcentaje), 1), "%\n"))
cat(paste("• Proveedores nuevos (2023+) con contratos:", nrow(proveedores_nuevos), "\n"))
cat(paste("• Concentración fin de año promedio:",
round(mean(concentracion_fin_año$Porcentaje_Fin_Año), 1), "%\n\n"))
